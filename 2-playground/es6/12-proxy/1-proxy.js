/* Proxy */

// - 설명:
//  - Proxy는 ES6에 추가된 함수. 정확히는 객체를 생성하는 생성자 함수임. Proxy의 특징은 다른 객체 또는 객체가 있을 때 해당 객체를 가로채서 혹은 객체에 대한 기본 동작을 가로채거나 조작할 수 있음
//  - 이것 때문에 FE 개발에서 할 수 없었던 것을 한다고 볼 수는 없고 해당 객체가 추가, 변경 혹은 삭제되거나 객체의 특정 값을 얻으려 했을 때 부수적인 일들을 중간에 가로채서 집어넣을 수 있음
//  - 참고로 axios를 알고 있다면 axios 인터셉터와 비슷한 느낌이라고 생각할 수 있는데 맞으며, axios 인터셉터와 Proxy 모두 개념적으로 비슷하여 특정 동작을 가로채거나 수정하는 기능을 제공함. 하지만 사용하는 목적과 범위에서 차이가 있음. Proxy는 일반 객체에 대한 속성 접근과 수정에 관한 것이고 axios 인터셉터는 HTTP 요청과 응답에 관련된 것. 그래서 Proxy는 객체 동작을 세밀하게 제어할 때 유용하며 axios 인터셉터는 API 호출의 전후 처리에 중점을 둠

// - Proxy와 axios 인터셉터의 공통점과 차이점 그리고 구현 방식:

//  - 공통점:
//   - 동작 가로채기 가능:
//      - axios 인터셉터는 HTTP 요청이나 응답을 가로채고 수정할 수 있음. 특히 요청이 서버에 보내지기 전에 헤더를 추가하거나, 응답을 처리하기 전에 특정 로직을 추가할 수 있는데 예를 들어 사용자 인증 토큰, 사용자 정의 메타데이터 전달, 또는 요청의 목적에 따라 필요한 정보 등을 추가하거나 수정하는데 사용됨
//      - Proxy는 객체에 대한 모든 조작(속성 접근, 수정, 삭제 등)을 가로챌 수 있음
//   - 커스터마이즈 가능: 둘 다 기본 동작을 수정하거나 커스터마이즈할 수 있도록 해주는 개념

//  - 차이점:
//   - 적용 범위:
//      - axios 인터셉터는 Axios 라이브러리의 요청 및 응답에 국한됨. 이는 HTTP 통신과 관련된 특정 작업을 다룬다는 것
//      - Proxy는 JS에서의 모든 객체에 대한 동작을 가로챌 수 있어, 훨씬 더 범용적임. 어떤 객체에도 적용할 수 있음

//  - 구현 방식:
//   - axios 인터셉터는 Axios의 메서드를 통해 설정하고 사용함
//   - Proxy: 새로운 Proxy 객체를 생성할 때 타겟 객체와 핸들러 객체를 정의하여 사용함

// 1. Proxy 사용 예시
const target = { name: 'Wang' }
const handler = {
  get(target, property) {
    return property in target ? target[property] : 'Property not found'
  },
}

const proxy = new Proxy(target, handler)
console.log(proxy.name) // "Wang"
console.log(proxy.age) // "Property not found"
