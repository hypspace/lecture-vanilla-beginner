/* Array.prototype.with(index, value) */

//  - 설명:
//   - 특정 인덱스의 요소를 새로운 값으로 변경한 배열의 얕은 복사본을 반환. 이 메서드는 ES2023(ES14)에서 도입됨
//   - 주어진 인덱스의 값을 변경하기 위해 대괄호 표기법을 사용하는 것의 복사 버전. 지정된 인덱스의 요소가 지정된 값으로 대체된 새 배열을 반환함

//  - 활용:
//   - 기존 배열을 변경하지 않고, 특정 인덱스의 요소만 변경된 새로운 배열을 생성할 때 사용됨

//  - 주의 사항:
//   - 지정한 인덱스가 배열의 범위를 벗어나면 undefined가 반환됨. 예를 들어, 음수 인덱스나 배열의 길이보다 큰 인덱스를 사용하면 원본 배열이 반환됨
//   - 비파괴적 메서드: with는 기존 배열을 변경하지 않고 새로운 배열을 반환함. 이는 함수형 프로그래밍의 원칙에 따라 상태를 변경하지 않기 때문에 장점이지만, 항상 새 배열을 반환하므로 메모리 사용량에 유의해야 함
//   - 지원 여부: with 메서드는 ES2023(ES14)에서 추가된 기능이므로, 구형 브라우저나 JS 환경에서는 지원되지 않을 수 있음. 사용하기 전에 환경의 호환성을 확인해야 함
//   - 이해하기 쉬운 코드 작성: 기존 배열을 변경하지 않고 새로운 배열을 반환하는 메서드는 종종 가독성을 높이지만, 많은 복사본이 생성될 수 있으므로, 성능이 중요한 경우 주의가 필요함

//      - index: 수정할 요소의 인덱스. 배열을 변경할 0 기반 인덱스이며 정수로 변환되는 값. 정규화 후 인덱스가 범위를 벗어나면, RangeError가 발생함
//      - value: 지정된 인덱스에 설정할 새로운 값. 주어진 인덱스에 할당할 값

// 1. 사용 예
const numbers = [1, 2, 3, 4, 5]
const newNumbers = numbers.with(2, 99) // 인덱스 2의 요소를 99로 변경한 새로운 배열 생성

console.log(newNumbers) // [1, 2, 99, 4, 5]
console.log(numbers) // [1, 2, 3, 4, 5] (원본 배열은 변경되지 않음)

// 2. 배열의 길이보다 큰 인덱스
// const arr = [1, 2, 3]
// const newArr = arr.with(5, 99) // RangeError: Invalid index : 5

// 2. 활용 예시

// 상태 관리 - 상태 관리 라이브러리에서 특정 상태를 업데이트할 때 사용할 수 있음
const state = ['idle', 'loading', 'success']

const newState = state.with(1, 'error') //. 특정 상태를 업데이트하여 새로운 상태 배열 생성

console.log(newState) // ['idle', 'error', 'success']
console.log(state) // ['idle', 'loading', 'success'] (원본 배열은 변경되지 않음)
